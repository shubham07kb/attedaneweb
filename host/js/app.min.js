class account { constructor(e, t, i) { } age() { return new Date().getFullYear() - this.year } } async function presetup() { window.onpopstate = function () { route() }, "serviceWorker" in navigator && window.addEventListener("load", () => { navigator.serviceWorker.register("/sw.js", { scope: "/" }).then(e => cl("Service registered:", e)).catch(e => cl("Service worker registration failed:", e)) }), void 0 == getls("isWebAuthnActive") || null == getls("isWebAuthnActive") || "" == getls("isWebAuthnActive") ? setls("isWebAuthnActive", 2) : (2 != getls("isWebAuthnActive") || 1 != getls("isWebAuthnActive") || 0 != getls("isWebAuthnActive")) && setls("isWebAuthnActive", 2); let e = document.createElement("style"); e.id = "style", gebi("head").appendChild(e); let t = document.createElement("div"); t.id = "main", gebi("body").appendChild(t) } async function webauthncreate() { let e = { challenge: Uint8Array.from("randomStringFromServer", e => e.charCodeAt(0)), rp: { name: sitename, id: siteurl }, user: { id: Uint8Array.from("UZSL85T9AFC", e => e.charCodeAt(0)), name: "lee@webauthn.guide", displayName: "Lee" }, pubKeyCredParams: [{ alg: -7, type: "public-key" }, { alg: -257, type: "public-key" }], authenticatorSelection: { authenticatorAttachment: "cross-platform" }, timeout: 6e4, attestation: "direct" }, t = await navigator.credentials.create({ publicKey: e }); console.log(t); let i = new TextDecoder("utf-8"), a = i.decode(t.response.clientDataJSON), n = JSON.parse(a); console.log(n); let o = CBOR.decode(t.response.attestationObject); console.log(o); let { authData: r } = o, s = new DataView(new ArrayBuffer(2)), c = r.slice(53, 55); c.forEach((e, t) => s.setUint8(t, e)); let l = s.getUint16(), d = r.slice(55, 55 + l); console.log(d); let u = r.slice(55 + l), h = CBOR.decode(u.buffer); console.log(h); let $ = { challenge: Uint8Array.from("randomStringFromServer", e => e.charCodeAt(0)), allowCredentials: [{ id: Uint8Array.from(d, e => e.charCodeAt(0)), type: "public-key", transports: ["usb", "ble", "nfc"] }], timeout: 6e4 }, m = await navigator.credentials.get({ publicKey: $ }); console.log(m), await getCredentialFromDatabase(userHandle, d) } function isteach(e) { return /^ET\d\d\d\d\d\d$/ism.test(e) } function isadmin(e) { return /^EA\d\d\d\d\d\d$/ism.test(e) } function ispass(e) { return /^(?=.*\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,20}$/.test(e) } function isstude(e) { return /^\d\d[A-Za-z][A-Za-z][A-Za-z]\d\d\d\d$/ism.test(e) } async function loginnow() { uid = gebi("uid").value, pass = gebi("passwd").value; let e = 1; "" == uid ? (gebi("uiderr").innerHTML = "Please enter your UID!", e = 0) : isstude(uid) || isteach(uid) || isadmin(uid) ? isadmin(uid) ? at = "a" : isteach(uid) ? at = "t" : isstude(uid) && (at = "s") : (gebi("uiderr").innerHTML = "Enter Valid UID!", e = 0), "" == pass ? (gebi("passerr").innerHTML = "Please enter your password!", e = 0) : ispass(pass) || (gebi("passerr").innerHTML = "Wrong Password!", e = 0), 1 == e && await oneajax("/sys/acchandler", "t=log&uid=" + uid + "&pass=" + pass + "&at=" + at) } function shasp() { "password" == gebi("passwd").type ? (gebi("passwd").type = "text", gebi("shasp").innerHTML = "Hide Password") : (gebi("passwd").type = "password", gebi("shasp").innerHTML = "Show Password") } async function loadlogin() { gebi("style").innerHTML = logpagecss, gebi("main").innerHTML = '<div id="telalogin"><div class="container-fundo"><div id="logo-cliente"><h1>CU</h1></div><div class="container-logins"><div class="login"><input type="text" id="uid" placeholder="UID"><i class="err" id="uiderr"></i><input id="passwd" type="password" placeholder="Passowrd"><i class="err" id="passerr"></i><div class="flex"><p class=\'ph\'>Reset Password</p><p class=\'ph\' id="shasp" onClick="shasp()">Show Password</p></div><button class="botao-login" onClick="loginnow()">Enter</button></div><div class="authenticate">' + fingerprinticon + "</div></div></div></div>" } function webauthpage() { ps("/webauthn"), gebi("style").innerHTML = logpagecss, 2 == getls("isWebAuthnActive") || 1 == ls("isWebAuthnActive") ? gebi("main").innerHTML = '<div id="telalogin"><div class="container-fundo"><div id="logo-cliente"><h1>CU</h1></div><div class="container-logins"><h2>WebAuthn Activate</h2><br><h4>Fast Login</h4><div class="authenticate">' + fingerprinticon + '</div><div class="login"><button class="botao-login" onClick="ps(\'/\');setls(\'isWebAuthnActive\',1,);makenav();callpage()">Skip</button></div></div></div></div>' : gebi("main").innerHTML = '<div id="telalogin"><div class="container-fundo"><div id="logo-cliente"><h1>CU</h1></div><div class="container-logins"><div class="login"><input type="text" id="uid" placeholder="UID"><i class="err" id="uiderr"></i><input id="passwd" type="password" placeholder="Passowrd"><i class="err" id="passerr"></i><div class="flex"><p class=\'ph\'>Reset Password</p><p class=\'ph\' id="shasp" onClick="shasp()">Show Password</p></div><button class="botao-login" onClick="loginnow()">Enter</button></div><div class="authenticate">' + fingerprinticon + "</div></div></div></div>" } function loginapply(e) { 1 == (e = JSON.parse(e)).statusCode && (setCookie("accheader", e.data.th, 1), setCookie("accdata", e.data.td, 1), setCookie("acckey", e.data.ts, 1), setCookie("accvheader", e.data.tvh, 1), setCookie("accvdata", e.data.tvd, 1), setCookie("accvkey", e.data.tvs, 1), 2 == getls("isWebAuthnActive") && webauthpage()) } async function applyattencur() { gebi("attenapplybg").innerHTML = '<video style="width: 500px; height: 400px; object-fit:cover;" id="vidatt"></video><br><div id="camloadedatt">Loading Camera</div>', Promise.all([faceapi.nets.faceRecognitionNet.loadFromUri("/content/other/models"), faceapi.nets.faceLandmark68Net.loadFromUri("/content/other/models"), faceapi.nets.ssdMobilenetv1.loadFromUri("/content/other/models")]).then(startattcam) } async function startattcam() { let e = navigator.mediaDevices, t = document.getElementById("vidatt"); e.getUserMedia({ video: !0, audio: !1 }).then(e => { streamstore = e, t.srcObject = e, t.addEventListener("loadedmetadata", () => { t.play() }) }).catch(alert), "geolocation" in navigator ? navigator.geolocation.getCurrentPosition(function (e) { locrunneddatt(g = { stat: 1, lat: e.coords.latitude, lon: e.coords.longitude }) }, function (e) { gebi("camloadedatt").innerHTML = "No Location Permission", alert("err: " + e.message) }) : (gebi("camloadedatt").innerHTML = "No Location Permission", alert("err: Geolocation not supported by the browser")) } function stopCamera() { stream && (stream.getTracks().forEach(e => e.stop()), stream = null) } function locrunneddatt(e) { glovar1 = e, gebi("camloadedatt").innerHTML = '<button onclick="runattcap()" style="background-color: #4CAF50;border: none;color: white;padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;margin: 4px 2px;cursor: pointer;">Snap</button></div><canvas id="canvas" width="320" height="240"></canvas>' } async function runattcap() { canvas = gebi("canvas"), video = gebi("vidatt"), canvas.getContext("2d").drawImage(video, 0, 0, canvas.width, canvas.height); let e = canvas.toDataURL("image/jpeg"); stopCamera(); let t = new Image; t.src = e; let i = await loadLabeledImages(), a = new faceapi.FaceMatcher(i, .6); canvas = faceapi.createCanvasFromMedia(t); let n = { width: t.width, height: t.height }; faceapi.matchDimensions(canvas, n); let o = await faceapi.detectAllFaces(t).withFaceLandmarks().withFaceDescriptors(), r = faceapi.resizeResults(o, n), s = r.map(e => a.findBestMatch(e.descriptor)); ivm = 0, s.forEach(e => { "Match" == e._label && (ivm = 1) }), 1 == ivm ? ((xhttp = new XMLHttpRequest).open("POST", "/sys/sec/crypto/foratt", !0), xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), xhttp.onreadystatechange = function () { if (4 == this.readyState && 200 == this.status) { let e = JSON.parse(this.responseText); xhttpn = new XMLHttpRequest, xhttp.open("POST", "/sys/attenapply/" + e.url, !0), xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), xhttp.onreadystatechange = function () { 4 == this.readyState && 200 == this.status && (1 == (res1 = JSON.parse(this.responseText)).stat ? psi("/attendance/apply") : alert("Error: " + res1.error)) }, attc = gebi("attensubid").innerHTML, xhttp.send("challange=" + e.challange + "&attc=" + attc) } }, console.log(glovar1), xhttp.send("lat" + glovar1.lat.toString() + "&lon" + glovar1.lon.toString())) : alert("Face Not Match") } async function loadLabeledImages() { let e = ["Match"]; return Promise.all(e.map(async e => { let t = []; for (let i = 1; i <= 2; i++) { let a = await faceapi.fetchImage(`/sys/faceapi/${i}`), n = await faceapi.detectSingleFace(a).withFaceLandmarks().withFaceDescriptor(); t.push(n.descriptor) } return new faceapi.LabeledFaceDescriptors(e, t) })) } async function callpage() { let e = await loadurldata(); ct(e), "webauthn" == e.urlpna[0] ? webauthpage() : "logout" == e.urlpna[0] ? logout() : (gebi("content").innerHTML = "Loading...", applytheme(), "" == e.urlpna[0] || "home" == e.urlpna[0] ? gebi("content").innerHTML = "<a onclick=\"psi('/attendance/apply')\">Attendance Apply</a><br><a onclick=\"psi('/timetable')\">TimeTable</a><br><a onclick=\"psi('/attendance')\">Attendance</a><a onclick=\"psi('/profile')\">Profile</a>" : "attendance" == e.urlpna[0] && "apply" == e.urlpna[1] ? "apply" == e.urlpna[1] && propagereq("applyatt") : "attendance" == e.urlpna[0] ? propagereq("attendance") : "createattendance" == e.urlpna[0] || "createacc" == e.urlpna[0] || ("profile" == e.urlpna[0] ? propagereq("profile") : "timetable" == e.urlpna[0] ? propagereq("timetable") : "createsubject" == e.urlpna[0] || "createclass" == e.urlpna[0] || "createbranch" == e.urlpna[0] || "applymed" == e.urlpna[0] || e.urlpna[0])) } async function pageload() { } function cl(e) { console.log(e) } function print(e) { console.log(e) } function ct(e) { console.table(e) } function gebi(e) { return document.getElementById(e) } function gesbcn(e) { return document.getElementsByClassName(e) } function setls(e, t) { localStorage.setItem(e, t) } function getls(e) { return localStorage.getItem(e) } function removels(e) { localStorage.removeItem(e) } function clearls() { localStorage.clear() } function jwthandler(e) { try { p = jwt_decode(e) } catch (t) { p = void 0 } return p } function randomIntFromInterval(e, t) { return Math.floor(Math.random() * (t - e + 1) + e) } async function requestsAreComplete(e) { return e.every(function (e) { return 4 == e.readyState }) } function unsuccessfulRequests(e) { var t = e.filter(function (e) { return 200 != e.status }); return t.length ? t : null } function onRequestsComplete(e, t) { function i() { requestsAreComplete(e) && t(e, unsuccessfulRequests(e)) } e.forEach(function (e) { e.onreadystatechange = i }) } async function setCookie(e, t, i) { let a = new Date; a.setTime(a.getTime() + 864e5 * i); let n = "expires=" + a.toUTCString(); document.cookie = e + "=" + t + ";" + n + ";path=/" } function getCookie(e) { let t = e + "=", i = document.cookie.split(";"); for (let a = 0; a < i.length; a++) { let n = i[a]; for (; " " == n.charAt(0);)n = n.substring(1); if (0 == n.indexOf(t)) return n.substring(t.length, n.length) } return "" } function checkCookie(e) { let t = getCookie(e); return "" != t && void 0 != t } async function removeAllCookie() { for (var e = document.cookie.split(";"), t = 0; t < e.length; t++)setCookie(e[t].split("=")[0], "", -1) } function deleteCookie(e) { setCookie(e, "", -1) } async function httpscheck() { "http:" == window.location.protocol && (window.location.href = window.location.href.replace("http:", "https:")) } async function loadurldata() { var e = []; e.url = window.location.href, e.urlp = window.location.protocol, e.urlh = window.location.host, e.urlpn = window.location.pathname, e.urlpna = window.location.pathname.split("/"), e.urlpna.shift(), e.urlse = window.location.search; var t = new URLSearchParams(e.urlse), i = []; for (let [a, n] of t) i[a] = n; return e.urlsea = i, e } async function switchtheme(e) { if ("a" == e) setCookie("theme_mode", "a", 365); else if ("d" == e) setCookie("theme_mode", "d", 365); else if ("l" == e) setCookie("theme_mode", "l", 365); else if ("s" == e) "a" == getCookie("theme_mode") ? setCookie("theme_mode", "d", 365) : "d" == getCookie("theme_mode") ? setCookie("theme_mode", "l", 365) : "l" == getCookie("theme_mode") && setCookie("theme_mode", "a", 365); else throw cl("Error: Invalid theme mode"), "Error: Invalid theme mode"; theme(), applytheme() } async function theme() { !0 == checkCookie("theme_mode") ? "a" == getCookie("theme_mode") ? setCookie("theme", "a", 365) : "d" == getCookie("theme_mode") ? setCookie("theme", "d", 365) : "l" == getCookie("theme_mode") && setCookie("theme", "l", 365) : ("undefined" != typeof prefered_theme_mode && "a" == prefered_theme_mode && "d" == prefered_theme_mode && "l" == prefered_theme_mode ? switchtheme(prefered_theme_mode) : switchtheme("a"), theme()) } function applytheme() { let e = getCookie("theme"); "a" == e ? (gebi("mode-ty").innerHTML = "System: ", gebi("style").innerHTML = "@media(prefers-color-scheme:dark){" + webdarkcss + "}@media(prefers-color-scheme:light){" + weblightcss + "}" + webcss) : "d" == e ? (gebi("mode-ty").innerHTML = "", gebi("style").innerHTML = webcss + webdarkcss) : "l" == e && (gebi("mode-ty").innerHTML = "", gebi("style").innerHTML = webcss + weblightcss) } async function ps(e, t = sitename) { let i = { id: "100" }; window.history.pushState(i, t, e) } async function psi(e, t = sitename) { let i = { id: "100" }; window.history.pushState(i, t, e), callpage() } async function oneajax(a, b = "") { (xhttp = new XMLHttpRequest).open("POST", a, !0), xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), xhttp.send(b), xhttp.onreadystatechange = await function () { if (4 == this.readyState && 200 == this.status) { let res; eval(JSON.parse(this.responseText).run) } } } async function propagereq(n) { onRequestsComplete([xhrp = new XMLHttpRequest, xhrd = new XMLHttpRequest], function (requests, unsuccessful) { !unsuccessful && (gebi("content").innerHTML = requests[0].responseText, eval(requests[1].responseText)) }), xhrp.open("GET", "/sp/" + n, !0), xhrd.open("GET", "/sp/meta/" + n, !0), xhrp.send(), xhrd.send() } function loadcr(e) { 0 == (e = JSON.parse(e)).statusCode ? logout() : 1 == e.statusCode && callpage() } async function logout() { removeAllCookie(); let e = await loadurldata(); "logout" == e.urlpna[0] && ps("/"), app() } async function makeip() { return await fetch("https://ipwho.is/" + reqip + "?fields=ip,message,success,type,continent,continent_code,country,country_code,region,region_code,city,latitude,longitude,postal,calling_code,calling_code,capital,borders,flag,connection.isp,connection.domain,timezone").then(e => e.json()).then(e => JSON.stringify(e)) } async function isipok() { if ("::1" == reqip) return 0; if (void 0 != getCookie("ip") && "" != getCookie("ip") && null !== getCookie("ip") && void 0 != getls("ip") && "" != getls("ip") && null !== getls("ip")) { if (decodeURI(getCookie("ip")) != getls("ip")) { let e = await makeip(); return setCookie("ip", encodeURI(e), 1), setls("ip", e), 0 } if (JSON.parse(getls("ip")).ip == reqip) return 0; { let t = await makeip(); return setCookie("ip", encodeURI(t), 1), setls("ip", t), 0 } } { let i = await makeip(); return setCookie("ip", encodeURI(i), 1), setls("ip", i), 0 } } async function makenav() { gebi("main").innerHTML = inhtml; let e = document.querySelector(".navbar-hamburger"), t = document.querySelector(".navbar-links"); document.querySelector("#mode-toggle"), document.querySelector("body"), e.addEventListener("click", () => { t.classList.toggle("active"), e.classList.toggle("active") }) } async function app() { "y" == isssl && await httpscheck(), presetup(), ipdone = 1, 0 == (ipdone = await isipok()) && (gebi("prewarn").innerHTML = "", void 0 != getCookie("accdata") && null != getCookie("accdata") && "" != getCookie("accdata") && void 0 != getCookie("accheader") && null != getCookie("accheader") && "" != getCookie("accheader") && void 0 != getCookie("acckey") && null != getCookie("acckey") && "" != getCookie("acckey") && void 0 != getCookie("accvdata") && null != getCookie("accvdata") && "" != getCookie("accvdata") && void 0 != getCookie("accvheader") && null != getCookie("accvheader") && "" != getCookie("accvheader") && void 0 != getCookie("accvkey") && null != getCookie("accvkey") && getCookie("accvkey") ? (oneajax("/sys/acchandler", "t=cr"), await makenav(), callpage()) : (await theme(), loadlogin())) } glovar1 = "", streamstore = "", logpagecss = "@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap'); body{ margin: 0; padding: 0; font-family: 'Montserrat', sans-serif; } :root{ --corprincipal: #000; --cinza: #D6D6D6; --branco: #FFF; --preto: #000; } .flex{ justify-content: space-between; display: flex; } #telalogin{ background: linear-gradient(-45deg, #0000FF, #0096FF, #00FFFF); animation: gradient 15s ease infinite; background-size: 400% 400%; justify-content: center; flex-direction: column; align-items: center; display: flex; text-align: center; height: 100vh; transition: 0.3s; } @keyframes gradient { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } } .container-fundo{ box-shadow: 0px 11px 34px #00000033; background-color: var(--branco); box-sizing: border-box; border-radius: 15px; max-width: 450px; padding: 50px; height: auto; width: 100%; } #logo-cliente img{ max-width: 200px; width: 100%; } .container-logins{ padding: 25px 0px; max-width: 440px; margin: auto; } .container-logins .login input{ border: 1px solid var(--cinza); box-sizing: border-box; margin: 5px 0 15px 0; color: var(--preto); border-radius: 6px; font-size: 16px; padding: 10px; height: 44px; width: 100%; transition: 0.3s; } .container-logins .login input::placeholder{ color: var(--cinza); } .container-logins .login input:focus-visible{ outline: 1px solid var(--corprincipal); border: 1px solid var(--corprincipal); } .container-logins .login p{ font-size: 14px; opacity: 0.6; margin: 0; } .container-logins .botao-login{ background-color: var(--branco); border: 1px solid var(--cinza); border-radius: 6px; margin-top: 30px; font-size: 16px; cursor: pointer; width: 150px; height: 45px; transition: 0.3s; } .container-logins .botao-login:hover{ background-color: var(--corprincipal); border: 1px solid var(--corprincipal); color: var(--branco); } .authenticate{ box-shadow: 0px 11px 34px #0000001a; background-color: var(--branco); border-radius: 10px; width: fit-content; padding: 10px 5px; margin: 20px auto; display: flex; } .authenticate svg{ margin: 5px 10px 0; cursor: pointer; width: 25px; } #logo-empresa{ width: 100%; } #logo-empresa img{ max-width: 100px; } @media screen and (max-width: 500px) { .container-fundo { max-width: 350px; padding: 35px; } } .ph:hover{color:blue;} .err{color:red;}", fingerprinticon = '<svg xmlns="http://www.w3.org/2000/svg" height="48" viewBox="0 96 960 960" width="48"><path d="M123 472q-4-2-4-6.5t2-8.5q62-86 157-133t203-47q108 0 203.5 46T843 455q3 5 2.5 8t-3.5 6q-3 3-7.5 3t-8.5-5q-59-82-150.5-126T481 297q-103 0-193 44.5T138 467q-4 5-7.5 6t-7.5-1Zm477 503q-103-26-169.5-103T364 685q0-47 34.5-79t82.5-32q48 0 82.5 32t34.5 79q0 38 29.5 64t68.5 26q38 0 66.5-26t28.5-64q0-123-91.5-206T481 396q-127 0-218.5 83T171 685q0 24 5.5 62.5T200 835q2 5 0 7.5t-5 4.5q-4 2-8.5 1t-6.5-6q-13-38-20.5-77.5T152 685q0-129 98-220.5T481 373q136 0 233.5 90T812 685q0 46-34 78t-82 32q-49 0-84-32t-35-78q0-39-28.5-65T481 594q-39 0-68 26t-29 65q0 104 63 173.5T604 956q6 2 7.5 5t.5 7q-1 5-4 7t-8 0ZM247 255q-5 2-7.5.5T235 251q-2-2-2-6t3-6q57-31 119.5-47T481 176q65 0 127.5 16T728 237q5 2 5.5 6t-1.5 7q-2 3-5.5 5t-8.5 0q-55-27-115-42.5T481 197q-62 0-121 14.5T247 255Zm134 709q-58-60-90.5-126T258 685q0-89 65.5-150T481 474q92 0 158.5 61T706 685q0 5-2.5 7.5T696 695q-5 0-8-2.5t-3-7.5q0-81-60.5-136T481 494q-83 0-142.5 55T279 685q0 85 29.5 145T396 950q4 4 3.5 7.5T396 964q-2 2-6.5 3.5T381 964Zm306-73q-88 0-152.5-58.5T470 685q0-5 2.5-8t7.5-3q5 0 7.5 3t2.5 8q0 81 59.5 133.5T687 871q8 0 19-1t24-3q5-1 8 1.5t4 5.5q1 4-.5 7t-6.5 4q-18 5-31.5 5.5t-16.5.5Z"/></svg>', app();